fun <- function(p,x,y,env1,env2,env3) {
sum(
(y-my_model(x,env1,env2,env3, p["r"], p["K"],p["c1"],p["c2"],p["c3"]))^2)
}
out <- optimr::optimr(params,fun,x=data$x,y=data$y,method="L-BFGS-B",
upper=c(2,Inf,rep(20,ncol(env))),lower=c(0.05,0,rep(-20,ncol(env))),
env1=env1,env2=env2,env3=env3)
return(out$par)
}
fitting.Schaefer_Mult_4=function(Data){
data=Data$data
start_r=Data$start_r
start_K=Data$start_K
start_c=Data$start_c
env=Data$env
env1=env[,1]; env2=env[,2]; env3=env[,3]; env4=env[,4]
my_model <- function(x,env1,env2, env3, env4,r, K,c1,c2,c3,c4) {
exp(1)^{c1*env1+c2*env2+c3*env3+c4*env4}*((r*x*(1-(x/K))))
}
params <- c(r=start_r ,K=start_K,c1=start_c,c2=start_c,c3=start_c,c4=start_c)
fun <- function(p,x,y,env1,env2,env3,env4) {
sum(
(y-my_model(x,env1,env2,env3,env4, p["r"], p["K"],p["c1"],p["c2"],p["c3"],p["c4"]))^2)
}
out <- optimr::optimr(params,fun,x=data$x,y=data$y,method="L-BFGS-B",
upper=c(2,Inf,rep(20,ncol(env))),lower=c(0.05,0,rep(-20,ncol(env))),
env1=env1,env2=env2,env3=env3,env4=env4)
return(out$par)
}
fitting.Schaefer_Mult_5=function(Data){
data=Data$data
start_r=Data$start_r
start_K=Data$start_K
start_c=Data$start_c
env=Data$env
env1=env[,1]; env2=env[,2]; env3=env[,3]; env4=env[,4]; env5=env[,5]
my_model <- function(x,env1,env2, env3, env4, env5, r, K,c1,c2,c3,c4,c5) {
exp(1)^{c1*env1+c2*env2+c3*env3+c4*env4+c5*env5}*((r*x*(1-(x/K))))
}
params <- c(r=start_r ,K=start_K,c1=start_c,c2=start_c,c3=start_c,c4=start_c,c5=start_c)
fun <- function(p,x,y,env1,env2,env3,env4,env5) {
sum(
(y-my_model(x,env1,env2,env3,env4,env5, p["r"], p["K"],p["c1"],p["c2"],p["c3"],p["c4"],p["c5"]))^2)
}
out <- optimr::optimr(params,fun,x=data$x,y=data$y,method="L-BFGS-B",
upper=c(2,Inf,rep(20,ncol(env))),lower=c(0.05,0,rep(-20,ncol(env))),
env1=env1,env2=env2,env3=env3,env4=env4,env5=env5)
return(out$par)
}
fitting.Pella_Add_2=function(Data){
data=Data$data
start_r=Data$start_r
start_K=Data$start_K
start_c=Data$start_c
start_p=Data$start_p
env=Data$env
env1=env[,1]; env2=env[,2]
my_model <- function(x,env1,env2, r, K,c1,c2,p) {
((r/p)*x*(1-(x/K)^(p))+c1*env1+c2*env2)
}
params <- c(r=start_r ,K=start_K,c1=start_c,c2=start_c,p=start_p)
fun <- function(p,x,y,env1,env2) {
sum(
(y-my_model(x,env1,env2, p["r"], p["K"],p["c1"],p["c2"],p["p"]))^2)
}
out <- optimr::optimr(params,fun,x=data$x,y=data$y,method="L-BFGS-B",
upper=c(2,Inf,rep(20,ncol(env)),3.5),lower=c(0.05,0,rep(-20,ncol(env)),0.25),
env1=env1,env2=env2)
return(out$par)
}
fitting.Pella_Add_3=function(Data){
data=Data$data
start_r=Data$start_r
start_K=Data$start_K
start_c=Data$start_c
start_p=Data$start_p
env=Data$env
env1=env[,1]; env2=env[,2]; env3=env[,3]
my_model <- function(x,env1,env2, env3, r, K,c1,c2,c3,p) {
((r/p)*x*(1-(x/K)^(p))+c1*env1+c2*env2+c3*env3)
}
params <- c(r=start_r ,K=start_K,c1=start_c,c2=start_c,c3=start_c,p=start_p)
fun <- function(p,x,y,env1,env2,env3) {
sum(
(y-my_model(x,env1,env2,env3, p["r"], p["K"],p["c1"],p["c2"],p["c3"],p["p"]))^2)
}
out <- optimr::optimr(params,fun,x=data$x,y=data$y,method="L-BFGS-B",
upper=c(2,Inf,rep(20,ncol(env)),3.5),lower=c(0.05,0,rep(-20,ncol(env)),0.25),
env1=env1,env2=env2,env3=env3)
return(out$par)
}
fitting.Pella_Add_4=function(Data){
data=Data$data
start_r=Data$start_r
start_K=Data$start_K
start_c=Data$start_c
start_p=Data$start_p
env=Data$env
env1=env[,1]; env2=env[,2]; env3=env[,3]; env4=env[,4]
my_model <- function(x,env1,env2, env3, env4,r, K,c1,c2,c3,c4,p) {
((r/p)*x*(1-(x/K)^(p))+c1*env1+c2*env2+c3*env3+c4*env4)
}
params <- c(r=start_r ,K=start_K,c1=start_c,c2=start_c,c3=start_c,c4=start_c,p=start_p)
fun <- function(p,x,y,env1,env2,env3,env4) {
sum(
(y-my_model(x,env1,env2,env3,env4, p["r"], p["K"],p["c1"],p["c2"],p["c3"],p["c4"],p["p"]))^2)
}
out <- optimr::optimr(params,fun,x=data$x,y=data$y,method="L-BFGS-B",
upper=c(2,Inf,rep(20,ncol(env)),3.5),lower=c(0.05,0,rep(-20,ncol(env)),0.25),
env1=env1,env2=env2,env3=env3,env4=env4)
return(out$par)
}
fitting.Pella_Add_5=function(Data){
data=Data$data
start_r=Data$start_r
start_K=Data$start_K
start_c=Data$start_c
start_p=Data$start_p
env=Data$env
env1=env[,1]; env2=env[,2]; env3=env[,3]; env4=env[,4]; env5=env[,5]
my_model <- function(x,env1,env2, env3, env4, env5, r, K,c1,c2,c3,c4,c5,p) {
((r/p)*x*(1-(x/K)^(p))+c1*env1+c2*env2+c3*env3+c4*env4+c5*env5)
}
params <- c(r=start_r ,K=start_K,c1=start_c,c2=start_c,c3=start_c,c4=start_c,c5=start_c,p=start_p)
fun <- function(p,x,y,env1,env2,env3,env4,env5) {
sum(
(y-my_model(x,env1,env2,env3,env4,env5, p["r"], p["K"],p["c1"],p["c2"],p["c3"],p["c4"],p["c5"],p["p"]))^2)
}
out <- optimr::optimr(params,fun,x=data$x,y=data$y,method="L-BFGS-B",
upper=c(2,Inf,rep(20,ncol(env)),3.5),lower=c(0.05,0,rep(-20,ncol(env)),0.25),
env1=env1,env2=env2,env3=env3,env4=env4,env5=env5)
return(out$par)
}
fitting.Schaefer_Add_2=function(Data){
data=Data$data
start_r=Data$start_r
start_K=Data$start_K
start_c=Data$start_c
env=Data$env
env1=env[,1]; env2=env[,2]
my_model <- function(x,env1,env2, r, K,c1,c2) {
((r*x*(1-(x/K)))+c1*env1+c2*env2)
}
params <- c(r=start_r ,K=start_K,c1=start_c,c2=start_c)
fun <- function(p,x,y,env1,env2) {
sum(
(y-my_model(x,env1,env2, p["r"], p["K"],p["c1"],p["c2"]))^2)
}
out <- optimr::optimr(params,fun,x=data$x,y=data$y,method="L-BFGS-B",
upper=c(2,Inf,rep(20,ncol(env))),lower=c(0.05,0,rep(-20,ncol(env))),
env1=env1,env2=env2)
return(out$par)
}
fitting.Schaefer_Add_3=function(Data){
data=Data$data
start_r=Data$start_r
start_K=Data$start_K
start_c=Data$start_c
env=Data$env
env1=env[,1]; env2=env[,2]; env3=env[,3]
my_model <- function(x,env1,env2, env3, r, K,c1,c2,c3) {
((r*x*(1-(x/K)))+c1*env1+c2*env2+c3*env3)
}
params <- c(r=start_r ,K=start_K,c1=start_c,c2=start_c,c3=start_c)
fun <- function(p,x,y,env1,env2,env3) {
sum(
(y-my_model(x,env1,env2,env3, p["r"], p["K"],p["c1"],p["c2"],p["c3"]))^2)
}
out <- optimr::optimr(params,fun,x=data$x,y=data$y,method="L-BFGS-B",
upper=c(2,Inf,rep(20,ncol(env))),lower=c(0.05,0,rep(-20,ncol(env))),
env1=env1,env2=env2,env3=env3)
return(out$par)
}
fitting.Schaefer_Add_4=function(Data){
data=Data$data
start_r=Data$start_r
start_K=Data$start_K
start_c=Data$start_c
env=Data$env
env1=env[,1]; env2=env[,2]; env3=env[,3]; env4=env[,4]
my_model <- function(x,env1,env2, env3, env4,r, K,c1,c2,c3,c4) {
((r*x*(1-(x/K)))+c1*env1+c2*env2+c3*env3+c4*env4)
}
params <- c(r=start_r ,K=start_K,c1=start_c,c2=start_c,c3=start_c,c4=start_c)
fun <- function(p,x,y,env1,env2,env3,env4) {
sum(
(y-my_model(x,env1,env2,env3,env4, p["r"], p["K"],p["c1"],p["c2"],p["c3"],p["c4"]))^2)
}
out <- optimr::optimr(params,fun,x=data$x,y=data$y,method="L-BFGS-B",
upper=c(2,Inf,rep(20,ncol(env))),lower=c(0.05,0,rep(-20,ncol(env))),
env1=env1,env2=env2,env3=env3,env4=env4)
return(out$par)
}
fitting.Schaefer_Add_5=function(Data){
data=Data$data
start_r=Data$start_r
start_K=Data$start_K
start_c=Data$start_c
env=Data$env
env1=env[,1]; env2=env[,2]; env3=env[,3]; env4=env[,4]; env5=env[,5]
my_model <- function(x,env1,env2, env3, env4, env5, r, K,c1,c2,c3,c4,c5) {
((r*x*(1-(x/K)))+c1*env1+c2*env2+c3*env3+c4*env4+c5*env5)
}
params <- c(r=start_r ,K=start_K,c1=start_c,c2=start_c,c3=start_c,c4=start_c,c5=start_c)
fun <- function(p,x,y,env1,env2,env3,env4,env5) {
sum(
(y-my_model(x,env1,env2,env3,env4,env5, p["r"], p["K"],p["c1"],p["c2"],p["c3"],p["c4"],p["c5"]))^2)
}
out <- optimr::optimr(params,fun,x=data$x,y=data$y,method="L-BFGS-B",
upper=c(2,Inf,rep(20,ncol(env))),lower=c(0.05,0,rep(-20,ncol(env))),
env1=env1,env2=env2,env3=env3,env4=env4,env5=env5)
return(out$par)
}
document()
document()
document()
document()
document()
detach("package:knobi", unload = TRUE)
install.packages("~/knobi_0.1.0.tar.gz", repos = NULL, type = "source")
document()
detach("package:knobi", unload = TRUE)
install.packages("~/knobi_0.1.0.tar.gz", repos = NULL, type = "source")
library(devtools)
library(roxygen2)
document()
document()
document()
document()
document()
document()
library(roxygen2)
library(devtools)
document()
detach("package:knobi", unload = TRUE)
install.packages("~/knobi_0.1.0.tar.gz", repos = NULL, type = "source")
install.packages("~/knobi_0.1.0.tar.gz", repos = NULL, type = "source")
document()
document()
detach("package:knobi", unload = TRUE)
install.packages("~/knobi_0.1.0.tar.gz", repos = NULL, type = "source")
document()
document()
document()
document()
document()
library(roxygen2)
library(devtools)
document()
document()
library(knobi)
# First step, getting the data from the ICES package
# install.packages("icesSAG")
library(icesSAG)
summary_data <- getSAG(stock = "Hake", year = 2021)
Database <- subset(summary_data, summary_data[,17] == "hke.27.3a46-8abd")
Database <- Database[-nrow(Database),]
data<-list()
data$Spawning_Biomass=Database$SSB # We take the SSB in our Database.
data$Catches=Database$catches # We take the catches in our Database.
data$F_input=Database$F # We take the F in our Database.
# Reference points estimates from ICES stock assessment model:
# ICES. 2021. Working Group for the Bay of Biscay and the Iberian Waters Ecoregion
# (WGBIE). ICES Scientific Reports. 3:48.1101 pp.
data$RP=list(F_MSY=0.259, B_MSY=207398, MSY=75052, B_0=NA)
# In this case, B_MSY is equal to SSB_MSY, since control$method="SSB"
# (see control list below).
data$classF_input="average" # Character indicating the type of F.
data$years=Database$Year    # Years corresponding to the catch values
control=list()
control$pella="TRUE" # Logical. TRUE means that Pella-Tomlinson model is used.
# FALSE means that Schaefer model is employed.
control$method="SSB" # Information for the fit: "SSB" or "Biomass".
# Finally, we can fit the model
knobi_results<-knobi_fit(data,control,plot_out=TRUE,plot_filename="results")
getwd()
remove.packages("knobi")
library(devtools)
install_github("MERVEX-group/knobi",build_vignettes = TRUE)
remove.packages("knobi")
install_github("MERVEX-group/knobi",build_vignettes = TRUE)
install_github("MERVEX-group/knobi",build_vignettes = TRUE)
library(devtools)
remove.packages("knobi")
install_github("MERVEX-group/knobi",build_vignettes = TRUE)
remove.packages("knobi")
install_github("MERVEX-group/knobi",build_vignettes = TRUE)
install_github("MERVEX-group/knobi",build_vignettes = TRUE)
library(devtools)
install_github("MERVEX-group/knobi",build_vignettes = TRUE)
install_github("jabbamodel/JABBA")
install.packages("JABBA")
install_github("cran/snpar")
install_github("jabbamodel/JABBA")
jbplot_prj
library(JABBA)
jbplot_prj
data(iccat)
jbinput <- build_jabba(catch=iccat$bet$catch,cpue=iccat$bet$cpue,se=iccat$bet$se,model.type="Fox")
bet1 = fit_jabba(jbinput,quickmcmc=TRUE,verbose=TRUE)
jbplot_summary(bet1)
View(jbinput)
jbinput[["settings"]]
bet1 = fit_jabba(jbinput,quickmcmc=TRUE,verbose=TRUE)
mp_jabba(jbinput)
bet1 = fit_jabba(jbinput,quickmcmc=TRUE,verbose=TRUE)
jbplot_summary(bet1)
jbinput[["data"]]
View(iccat)
jbplot_prj(bet1)
data(iccat)
whm = iccat$whm
# ICCAT white marlin setup
jb = build_jabba(catch=whm$catch,cpue=whm$cpue,se=whm$se,assessment="WHM",scenario = "BaseCase",model.type = "Pella",r.prior = c(0.181,0.18),BmsyK = 0.39,igamma = c(0.001,0.001))
fit = fit_jabba(jb,quickmcmc=TRUE,verbose=TRUE)
hc = hindcast_jabba(jbinput=jb,fit=fit,peels=1:5)
jbplot_retro(hc)
jbplot_hcxval(hc,index=c(8,11))
hc.ar1 = jbhcxval(hc,AR1=TRUE) # do hindcasting with AR1
jbplot_hcxval(hc.ar1,index=c(8,11))
View(hc.ar1)
View(bet1)
bet1[["yr"]]
K=500000
r=0.005
p=1.5
y=55555
c=10000
solve(x=y+(r/p)*((x+y)/2)*(1-((x+y)^p)/(K^p*2^p))-c,x)
?solve
bt2=function(x,y,c,p,K,r){x~y+(r/p)*((x+y)/2)*(1-((x+y)^p)/(K^p*2^p))-c}
optimr(x=1,fn=bt2,y=y,K)
optimr(x=1,fn=bt2,y=y,K=K,r=r,p=p,c=c)
library(optimr)
optimr(x=1,fn=bt2,y=y,K=K,r=r,p=p,c=c)
optimr(x=1,fn=bt2,y=y,K=K,r=r,p=p,c=c)
optimr(x=1,fn=bt2,y=y,K=K,r=r,p=p,c=c)
my_model <- function(x,y,c,p,K,r){x~y+(r/p)*((x+y)/2)*(1-((x+y)^p)/(K^p*2^p))-c}
out <- optimr::optimr(params=c(x=1),fun=my_model,y=y,K=K,r=r,p=p,c=c)
out <- optimr::optimr(params=c(x=1),fn=my_model,y=y,K=K,r=r,p=p,c=c)
?optimr
out <- optimr::optimr(par=c(x=1),fn=my_model,y=y,K=K,r=r,p=p,c=c)
?optimize
optimize(my_model,c(1,1500000),y=y,K=K,r=r,p=p,c=c)
f  <- function(x) ifelse(x > -1, ifelse(x < 4, exp(-1/abs(x - 1)), 10), 10)
fp <- function(x) { print(x); f(x) }
plot(f, -2,5, ylim = 0:1, col = 2)
optimize(fp, c(-4, 20))   # doesn't see the minimum
optimize(fp, c(-7, 20))
my_model <- function(x,y,c,p,K,r){y+(r/p)*((x+y)/2)*(1-((x+y)^p)/(K^p*2^p))-c}
c(y=y,K=K,r=r,p=p,c=c)
optimize(my_model,c(1,1500000),y=y,K=K,r=r,p=p,c=c)
x=43117.66
y+(r/p)*((x+y)/2)*(1-((x+y)^p)/(K^p*2^p))-c
optimize(my_model,c(1),y=y,K=K,r=r,p=p,c=c)
optimize(my_model,c(1,100),y=y,K=K,r=r,p=p,c=c)
x=45646.38
y+(r/p)*((x+y)/2)*(1-((x+y)^p)/(K^p*2^p))-c
?optimize
optimize(my_model,c(0,1),y=y,K=K,r=r,p=p,c=c)
x=45646.38
y+(r/p)*((x+y)/2)*(1-((x+y)^p)/(K^p*2^p))-c
nlm(x~y+(r/p)*((x+y)/2)*(1-((x+y)^p)/(K^p*2^p))-c,p=c(x=1),y=y,K=K,r=r,p=p,c=c)
optimize(my_model,c(0,1),y=y,K=K,r=r,p=p,c=c,tol=0.000000001)
optimize(my_model,c(0,2),y=y,K=K,r=r,p=p,c=c,tol=0.000000001)
optimize(my_model,c(0,1000),y=y,K=K,r=r,p=p,c=c,tol=0.000000001)
f <- function (x, a) (x - a)^2
xmin <- optimize(f, c(0, 1), tol = 0.0001, a = 1/3)
xmin
## See where the function is evaluated:
optimize(function(x) x^2*(print(x)-1), lower = 0, upper = 10)
## "wrong" solution with unlucky interval and piecewise constant f():
f  <- function(x) ifelse(x > -1, ifelse(x < 4, exp(-1/abs(x - 1)), 10), 10)
fp <- function(x) { print(x); f(x) }
plot(f, -2,5, ylim = 0:1, col = 2)
optimize(fp, c(-4, 20))   # doesn't see the minimum
optimize(fp, c(-7, 20))
(-r*K+y*r+2*K+sqrt(K)*sqrt(r^2*K-4*r*K+8*y*r-4*c*r+4*K)/r
)
(-r*K+y*r+2*K+sqrt(K)*sqrt(r^2*K-4*r*K+8*y*r-4*c*r+4*K))/r
(-r*K+y*r+2*K-sqrt(K)*sqrt(r^2*K-4*r*K+8*y*r-4*c*r+4*K))/r
K=100000
(-r*K+y*r+2*K+sqrt(K)*sqrt(r^2*K-4*r*K+8*y*r-4*c*r+4*K))/r
(-r*K+y*r+2*K+sqrt(K)*sqrt((r^2)*K-4*r*K+8*y*r-4*c*r+4*K))/r
(-r*K+y*r+2*K+sqrt(K)*sqrt((r^2)*K-4*r*K+8*y*r-4*c*r+4*K))/r
(-r*K+y*r+2*K+sqrt(K)*sqrt((r^2)*K-4*r*K+8*y*r-4*c*r+4*K))/r
(-r*K+y*r+2*K-sqrt(K)*sqrt(r^2*K-4*r*K+8*y*r-4*c*r+4*K))/r
-(-r*K+y*r+2*K-sqrt(K)*sqrt(r^2*K-4*r*K+8*y*r-4*c*r+4*K))/r
sch=function(bt,r,K){-(-r*K+bt*r+2*K-sqrt(K)*sqrt(r^2*K-4*r*K+8*bt*r-4*c*r+4*K))/r}
bt=10000
r=0.05
K=100000
c=4000
for(i in 1:20){
bt0=bt[i]
bt1=sch(bt0,r,K)
bt=c(bt,bt1)
}
c=8000
bt=10000
r=0.05
K=100000
c=8000
for(i in 1:20){
bt0=bt[i]
bt1=sch(bt0,r,K)
bt=c(bt,bt1)
}
bt=10000
r=0.05
K=100000
c=1000
for(i in 1:20){
bt0=bt[i]
bt1=sch(bt0,r,K)
bt=c(bt,bt1)
}
bt
bt=10000
r=0.05
K=100000
c=1000
for(i in 1:10){
bt0=bt[i]
bt1=sch(bt0,r,K)
bt=c(bt,bt1)
}
bt
newbt=bt[1]
m_sch<-function(bt1,bt,c,p,K,r) {bt+(r/p)*((bt1+bt)/2)*(1-((bt1+bt)^p)/(K^p*2^p))-c}
optimize(my_model,c(0,1),bt=bt,K=K,r=r,p=p,c=c)
optimize(my_model,c(0,1),bt=newbt,K=K,r=r,p=p,c=c)
m_sch<-function(bt1,bt,c,K,r) {bt+(r)*((bt1+bt)/2)*(1-((bt1+bt))/(K*2))-c}
optimize(my_model,c(0,1),bt=newbt,K=K,r=r,p=p,c=c)
optimize(my_model,c(0,1),y=y,K=K,r=r,p=p,c=c)
optimize(m_sch,c(0,1),bt=newbt,K=K,r=r,p=p,c=c)
optimize(m_sch,c(0,1),bt=newbt,K=K,r=r,c=c)
newbt=bt[1]
m_sch<-function(bt1,bt,c,K,r) {bt+(r)*((bt1+bt)/2)*(1-((bt1+bt))/(K*2))-c}
jjjj=optimize(my_model,c(0,1),y=y,K=K,r=r,c=c)
optimize(m_sch,c(0,1),bt=newbt,K=K,r=r,c=c)
jjjj=optimize(m_sch,c(0,1),bt=newbt,K=K,r=r,c=c)
jjjj$objective
newbt=bt[1]
m_sch<-function(bt1,bt,c,K,r) {bt+(r)*((bt1+bt)/2)*(1-((bt1+bt))/(K*2))-c}
for(i in 1:10)
{}
for(i in 1:10){
b0=newbt[i]
v=optimize(m_sch,c(0,1),bt=b0,K=K,r=r,c=c)
newbt=c(newbt,v$objective)
}
newbt
bt
newbt=bt[1]
newbt+(r)*((9237.500+newbt)/2)*(1-((9237.500+newbt))/(K*2))-c}
newbt+(r)*((9237.500+newbt)/2)*(1-((9237.500+newbt))/(K*2))-c
optimize(x~bt+(r)*((bt1+bt)/2)*(1-((bt1+bt))/(K*2))-c,c(0,1),bt=10000,K=K,r=r,c=c)
optimize(bt+(r)*((bt1+bt)/2)*(1-((bt1+bt))/(K*2))-c,c(0,1),bt=10000,K=K,r=r,c=c)
newbt
newbt
sch=function(bt,r,K){-(-r*K+bt*r+2*K-sqrt(K)*sqrt(r^2*K-4*r*K+8*bt*r-4*c*r+4*K))/r}
bt=10000
r=0.05
K=100000
c=1000
for(i in 1:10){
bt0=bt[i]
bt1=sch(bt0,r,K)
bt=c(bt,bt1)
}
newbt=bt[1]
m_sch<-function(bt1,bt,c,K,r) {bt+(r)*((bt1+bt)/2)*(1-((bt1+bt))/(K*2))-c}
for(i in 1:10){
b0=newbt[i]
v=optimize(m_sch,c(0,1),bt=b0,K=K,r=r,c=c)
newbt=c(newbt,v$objective)
}
newbt
bt
10000+(r)*((9237.500+10000)/2)*(1-((9237.500+10000))/(K*2))-c
optimize(m_sch,c(0,1),bt=10000,K=K,r=r,c=c)
10000+(r)*((9237.500+10000)/2)*(1-((9237.500+10000))/(K*2))-c
m_sch<-function(bt1,bt,c,K,r) {bt+(r)*((bt1+bt)/2)*(1-((bt1+bt))/(K*2))-c-bt1}
optimize(m_sch,c(0,1),bt=10000,K=K,r=r,c=c)
m_sch<-function(bt1,bt,c,K,r) {bt+(r)*((bt1+bt)/2)*(1-((bt1+bt))/(K*2))-c}
for(i in 1:10){
b0=newbt[i]
v=optimize(m_sch,c(0,1),bt=b0,K=K,r=r,c=c)
newbt=c(newbt,v$objective)
}
optimize(m_sch,c(0,1),bt=10000,K=K,r=r,c=c)
10000+(r)*((9237.500+10000)/2)*(1-((9237.500+10000))/(K*2))-c
sch=function(bt,r,K){-(-r*K+bt*r+2*K-sqrt(K)*sqrt(r^2*K-4*r*K+8*bt*r-4*c*r+4*K))/r}
bt=10000
r=0.05
K=100000
c=1000
for(i in 1:10){
bt0=bt[i]
bt1=sch(bt0,r,K)
bt=c(bt,bt1)
}
newbt=bt[1]
m_sch<-function(bt1,bt,c,K,r) {bt+(r)*((bt1+bt)/2)*(1-((bt1+bt))/(K*2))-c}
for(i in 1:10){
b0=newbt[i]
v=optimize(m_sch,c(0,1),bt=b0,K=K,r=r,c=c)
newbt=c(newbt,v$objective)
}
optimize(m_sch,c(0,1),bt=10000,K=K,r=r,c=c)
10000+(r)*((9237.500+10000)/2)*(1-((9237.500+10000))/(K*2))-c
