cut=K
av <- seq(0, cut, length.out = 3*length(x))
(r)*av*(1-(av/K))
}
predict_model.Schaefer_Year=function(fit){
x=fit$data[[2]]
r=fit$Parameter_estimates[1]
K=fit$Parameter_estimates[2]
as.numeric((r)*x*(1-(x/K)))
}
predict_model.Pella_Year=function(fit){
x=fit$data[[2]]
r=fit$Parameter_estimates[1]
K=fit$Parameter_estimates[2]
p=fit$Parameter_estimates[3]
as.numeric((r/p)*x*(1-(x/K)^(p)))
}
predict_model.Pella_Mult=function(fit){
x=fit$data[[2]]
data=fit$data
env=data$env
r=fit[[1]][1]
K=fit[[1]][2]
c=fit[[1]][3]
p=fit[[1]][4]
as.numeric(exp(1)^{c*env}*((r/p)*x*(1-(x/K)^(p))))
}
predict_model.Pella_Add=function(fit){
x=fit$data[[2]]
data=fit$data
env=data$env
r=fit[[1]][1]
K=fit[[1]][2]
c=fit[[1]][3]
p=fit[[1]][4]
as.numeric((r/p)*x*(1-(x/K)^(p))+c*env*x)
}
predict_model.Schaefer_Mult=function(fit){
x=fit$data[[2]]
data=fit$data
env=data$env
r=fit[[1]][1]
K=fit[[1]][2]
c=fit[[1]][3]
as.numeric(exp(1)^{c*env}*((r)*x*(1-(x/K))))
}
predict_model.Schaefer_Add=function(fit){
x=fit$data[[2]]
data=fit$data
env=data$env
r=fit[[1]][1]
K=fit[[1]][2]
c=fit[[1]][3]
as.numeric((r)*x*(1-(x/K))+c*env*x)
}
predict_model.Pella_Mult_m=function(fit){
x=fit$data[[2]]
data=fit$data
env=as.matrix(data$env)
c_length=ncol(fit$data$env)
r=fit[[1]][1]
K=fit[[1]][2]
c=fit[[1]][3:(2+c_length)]
p=fit[[1]][length(fit[[1]])]
as.numeric(exp(1)^{env %*% c}*((r/p)*x*(1-(x/K)^(p))))
}
predict_model.Pella_Add_m=function(fit){
x=fit$data[[2]]
data=fit$data
env=as.matrix(data$env)
c_length=ncol(fit$data$env)
r=fit[[1]][1]
K=fit[[1]][2]
c=fit[[1]][3:(2+c_length)]
p=fit[[1]][length(fit[[1]])]
as.numeric((r/p)*x*(1-(x/K)^(p)) + (env %*% c)*x)
}
predict_model.Schaefer_Mult_m=function(fit){
x=fit$data[[2]]
data=fit$data
env=as.matrix(data$env)
r=fit[[1]][1]
K=fit[[1]][2]
c=fit[[1]][3:length(fit[[1]])]
as.numeric(exp(1)^{env %*% c}*((r)*x*(1-(x/K))))
}
predict_model.Schaefer_Add_m=function(fit){
x=fit$data[[2]]
data=fit$data
env=as.matrix(data$env)
r=fit[[1]][1]
K=fit[[1]][2]
c=fit[[1]][3:length(fit[[1]])]
as.numeric((r)*x*(1-(x/K)) + (env %*% c)*x)
}
bv <- predict_model(fit); fit_base=fit
df_aux=data.frame(av,bv)
if(control$method=="Biomass"){
xtit="SP curve and observed average Biomass and SP"
xaxis="Average Biomass"
xleg="observed biomass"
} else {
xtit="SP curve and observed average SSB and SP"
xaxis="Average Spawn Biomass (SSB)"
xleg="observed SSB"
}
vec=min(df_aux$bv,df$y)
vec1=max(df_aux$bv,df$y)
fit_plot=ggplot2::ggplot(data=df_aux,ggplot2::aes(x=av,y=bv)) + ggplot2::theme_bw() +
ggplot2::geom_line(ggplot2::aes(size=1.5)) + ggplot2::ylim(vec,vec1) +
ggplot2::geom_point(data=df[c(1,nrow(df)),],ggplot2::aes(x=x,y=y,size=3,color=Year)) +
ggplot2::geom_text(data=df[c(1,nrow(df)),],ggplot2::aes(x=x,y=y,size=2,color=Year,
label=Year,vjust=-1), show.legend = FALSE) +
ggplot2::geom_point(data=df,ggplot2::aes(x=x,y=y,color=Year)) +
ggplot2::geom_path(data=df,ggplot2::aes(x=x,y=y,color=Year)) +
ggplot2::labs(title=xtit,x =xaxis, y = "Surplus Production (SP)") +
ggplot2::guides(size="none",col=ggplot2::guide_legend(title=xleg)) +
ggplot2::scale_color_gradient(breaks=c(Year[1],Year[length(Year)])) +
ggplot2::theme(legend.position = c(.9,.85), legend.background = ggplot2::element_rect(fill = "transparent"),
plot.title = ggplot2::element_text(hjust = 0.5), plot.subtitle = ggplot2::element_text(hjust = 0.5),
axis.line=ggplot2::element_line())
print(fit_plot)
df$C=C
vec=min(df_aux$bv,df$C)
vec1=max(df_aux$bv,df$C)
fitc_plot=ggplot2::ggplot(data=df_aux,ggplot2::aes(x=av,y=bv)) + ggplot2::theme_bw() +
ggplot2::geom_line(ggplot2::aes(size=1.5)) + ggplot2::ylim(vec,vec1) +
ggplot2::geom_point(data=df[c(1,nrow(df)),],ggplot2::aes(x=x,y=C,size=3,color=Year)) +
ggplot2::geom_text(data=df[c(1,nrow(df)),],ggplot2::aes(x=x,y=C,size=2,color=Year,
label=Year,vjust=-1), show.legend = FALSE) +
ggplot2::geom_point(data=df,ggplot2::aes(x=x,y=C,color=Year)) +
ggplot2::geom_path(data=df,ggplot2::aes(x=x,y=C,color=Year)) +
ggplot2::labs(title="SP curve and observed catches and SP",
x ="Average Spawning Biomass (SSB)", y = "Surplus Production (SP)") +
ggplot2::guides(size="none",col=ggplot2::guide_legend(title="Observed catches")) +
ggplot2::scale_color_gradient(breaks=c(Year[1],Year[length(Year)])) +
ggplot2::theme(legend.position = c(.9,.85), legend.background = ggplot2::element_rect(fill = "transparent"),
plot.title = ggplot2::element_text(hjust = 0.5), plot.subtitle = ggplot2::element_text(hjust = 0.5))
print(fitc_plot)
RF=function(fit){
UseMethod("RF",fit)
}
RF.Pella=function(fit){
r=fit[[1]][1]
K=fit[[1]][2]
p=fit[[1]][3]
K<-as.numeric(K)
Bmsy<-as.numeric(K*(1/(p+1))^(1/p))
MSY<-as.numeric(r*K*(1/(p+1))^(1+1/p))
x<-as.numeric(MSY/K)
Fmsy=as.numeric((r/p)*(1-(1/(p+1))))
fit$K=K
fit$B_MSY=Bmsy
fit$F_MSY=Fmsy
fit$MSY=MSY
fit$MSYoverK=x
fit
}
RF.Schaefer=function(fit){
r=fit[[1]][1]
K=fit[[1]][2]
K<-as.numeric(K)
Bmsy<-as.numeric(K/2)
MSY<-as.numeric((1/4)*r*K)
x<-as.numeric(MSY/K)
Fmsy=as.numeric(r/2)
fit$K=K
fit$B_MSY=Bmsy
fit$F_MSY=Fmsy
fit$MSY=MSY
fit$MSYoverK=x
fit
}
RF.Pella_Mult = RF.Pella_Add = RF.Pella_Mult_m = RF.Pella_Add_m = function(fit){
r=fit[1]
K=fit[2]
p=fit[length(fit)]
K<-as.numeric(K)
Bmsy<-as.numeric(K*(1/(p+1))^(1/p))
MSY<-as.numeric(r*K*(1/(p+1))^(1+1/p))
x<-as.numeric(MSY/K)
Fmsy=as.numeric(r/(p+1))
ref_pts=data.frame(K,Bmsy,Fmsy,MSY,MSYoverK=x)
ref_pts
}
RF.Schaefer_Mult = RF.Schaefer_Add = RF.Schaefer_Mult_m = RF.Schaefer_Add_m = function(fit){
r=fit[1]
K=fit[2]
K<-as.numeric(K)
Bmsy<-as.numeric(K/2)
MSY<-as.numeric((1/4)*r*K)
x<-as.numeric(MSY/K)
Fmsy=as.numeric(r/2)
ref_pts=data.frame(K,Bmsy,Fmsy,MSY,MSYoverK=x)
ref_pts
}
fit=RF(fit)
Bmsy=fit$B_MSY
Fmsy=fit$F_MSY
F_out=data$F_output
if(is.na(data$F_input[1])) {F_inp=rep(NA,length(F_out))} else {F_inp=data$F_input}
if(is.null(data$RP$F_MSY)) {Fmsy_inp=NA} else {Fmsy_inp=data$RP$F_MSY}
Frel_out=F_out/Fmsy
Frel_inp=F_inp/Fmsy_inp
if(is.null(data$RP$B_MSY)) {Bmsy_inp=NA} else {Bmsy_inp=data$RP$B_MSY}
Brel_out=B_p/Bmsy
Brel_inp=B_p/Bmsy_inp
max_f=max(c(F_inp,F_out,Fmsy,Fmsy_inp)*1.1,na.rm = TRUE)
min_f=min(c(F_inp,F_out,Fmsy,Fmsy_inp),na.rm = TRUE)
max_b=max(c(B_p,Bmsy,Bmsy_inp)*1.1,na.rm = TRUE)
min_b=min(c(B_p,Bmsy,Bmsy_inp),na.rm = TRUE)
max_fr=max(c(Frel_inp,Frel_out,1.1),na.rm = TRUE)
min_fr=min(c(Frel_inp,Frel_out,0.9),na.rm = TRUE)
max_br=max(c(Brel_inp,Brel_out,1.1),na.rm = TRUE)
min_br=min(c(Brel_inp,Brel_out,0.9),na.rm = TRUE)
if(control$method=="SSB"){bfac=c(rep("SSB from KBPM",length(Year)+1),rep("original SSB",length(Year)+1))
} else {bfac=c(rep("B from KBPM",length(Year)+1),rep("original B",length(Year)+1))}
if(control$method=="SSB"){
btit="Spawning Biomass (SSB) over Years"
baxis="Spawning biomass (SSB)"
Brtit="Relative SSB over Years"} else {
btit="Biomass over Years"
baxis="Biomass"
Brtit="Relative Biomass over Years"}
plot_df=data.frame(Year=rep(c(Year,Year[length(Year)]+1),2),f=c(F_out,NA,F_inp,NA),fr=c(Frel_out,NA,Frel_inp,NA),
f_factor=c(rep("F from KBPM",length(Year)+1),rep("original F",length(Year)+1)),
b=rep(B_p,2),br=c(Brel_out,Brel_inp),b_factor=bfac)
View(plot_df)
f_plot=ggplot2::ggplot(data=subset(plot_df,!is.na(f)),ggplot2::aes(x=Year,y=f,color=f_factor)) +
ggplot2::theme_bw() + ggplot2::geom_line() + ggplot2::geom_point() +
ggplot2::ylim(min_f,max_f) +
ggplot2::labs(title="Fishing Mortality (F) over Years",y = "Fishing mortality (F)") +
ggplot2::geom_hline(yintercept=c(Fmsy,Fmsy_inp),linetype="dashed",
color = c("#F8766D","#00BFC4"), na.rm=T) +
ggplot2::annotate("text",x=Year[length(Year)]-1,y=Fmsy,label="Fmsy (KBPM)",
color = "#F8766D",size=3,vjust=-1) +
ggplot2::guides(col=ggplot2::guide_legend(title="")) +
ggplot2::theme(legend.position = c(.9,.95), legend.background = ggplot2::element_rect(fill = "transparent"),
plot.title = ggplot2::element_text(hjust = 0.5), plot.subtitle = ggplot2::element_text(hjust = 0.5))
if(!is.na(Fmsy_inp)){
f_plot = f_plot +
ggplot2::annotate("text",x=Year[1]+1,y=Fmsy_inp,label="original Fmsy",color = "#00BFC4",na.rm=T,size=3,vjust=-1)
}
print(f_plot)
fr_plot=ggplot2::ggplot(data=subset(plot_df,!is.na(fr)),ggplot2::aes(x=Year,y=fr,color=f_factor)) +
ggplot2::theme_bw() + ggplot2::geom_line() + ggplot2::geom_point() +
ggplot2::ylim(min_fr,max_fr) + ggplot2::geom_hline(yintercept=1) +
ggplot2::labs(title="Relative Fishing Mortality (F) over Years",y = "Fishing mortality (F)") +
ggplot2::guides(col=ggplot2::guide_legend(title="")) +
ggplot2::theme(legend.position = c(.9,.95), legend.background = ggplot2::element_rect(fill = "transparent"),
plot.title = ggplot2::element_text(hjust = 0.5), plot.subtitle = ggplot2::element_text(hjust = 0.5))
print(fr_plot)
if(plot_out==T){
p <- grDevices::recordPlot()
grDevices::jpeg("F_relative.jpeg",width=2500, height=2500,res=300)
grDevices::replayPlot(p)
grDevices::dev.off()
}
b_plot=ggplot2::ggplot(data=plot_df,ggplot2::aes(x=Year,y=b,color="#F8766D")) +
ggplot2::theme_bw() + ggplot2::geom_line() + ggplot2::geom_point() +
ggplot2::ylim(min_b,max_b) + ggplot2::labs(title=btit,y=baxis) +
ggplot2::geom_hline(yintercept=c(Bmsy,Bmsy_inp),linetype="dashed",
color = c("#F8766D","#00BFC4"), na.rm=T) +
ggplot2::annotate("text",x=Year[length(Year)]-1,y=Bmsy,label="Bmsy (KBPM)",
color = "#F8766D",size=3,vjust=-1) +
ggplot2::theme(legend.position = "none", plot.title = ggplot2::element_text(hjust = 0.5), plot.subtitle = ggplot2::element_text(hjust = 0.5))
if(!is.na(Bmsy_inp)){
b_plot = b_plot +
ggplot2::annotate("text",x=Year[1]+1,y=Bmsy_inp,label="original Bmsy",color = "#00BFC4",na.rm=T,size=3,vjust=-1)
}
print(b_plot)
if(plot_out==T){
p <- grDevices::recordPlot()
grDevices::jpeg("B_absolute.jpeg",width=2500, height=2500,res=300)
grDevices::replayPlot(p)
grDevices::dev.off()
}
br_plot=ggplot2::ggplot(data=subset(plot_df,!is.na(br)),ggplot2::aes(x=Year,y=br,color=b_factor)) +
ggplot2::theme_bw() + ggplot2::geom_line() + ggplot2::geom_point() + ggplot2::ylim(min_br,max_br) +
ggplot2::labs(title=Brtit ,y =baxis) + ggplot2::geom_hline(yintercept=1) +
ggplot2::guides(col=ggplot2::guide_legend(title="")) +
ggplot2::theme(legend.position = c(.9,.95), legend.background = ggplot2::element_rect(fill = "transparent"),
plot.title = ggplot2::element_text(hjust = 0.5), plot.subtitle = ggplot2::element_text(hjust = 0.5))
print(br_plot)
install_github("MERVEX-group/knobi",build_vignettes = TRUE)
library(devtools)
install_github("MERVEX-group/knobi",build_vignettes = TRUE)
document()
document()
document()
document()ç+
document()
document()
document()
document()
document()
document()
document()
document()
library(devtools)
document()
read.dcf(system.file("DESCRIPTION", package = "knobi", mustWork = TRUE))
document()
document()
document()
document()
document()
document()
document()
document()
document()
install_github("MERVEX-group/knobi",build_vignettes = TRUE)
document()
document()
install_github("MERVEX-group/knobi",build_vignettes = TRUE)
install_github("MERVEX-group/knobi",build_vignettes = TRUE)
library(knobi)
detach("package:knobi", unload = TRUE)
install_github("MERVEX-group/knobi",build_vignettes = TRUE)
install_github("MERVEX-group/knobi",build_vignettes = TRUE)
devtools::install_github("MERVEX-group/knobi",build_vignettes = TRUE)
devtools::install_github("MERVEX-group/knobi")
devtools::install_github("MERVEX-group/knobi",build_vignettes = TRUE)
devtools::install_github("MERVEX-group/knobi",build_vignettes = TRUE)
devtools::install_github("MERVEX-group/knobi",build_vignettes = TRUE)
library(devtools)
library(roxygen2)
document()
document()
document()
document()
?array
document()
document()
devtools::install_github("MERVEX-group/knobi",build_vignettes = TRUE)
library(knobi)
detach("package:knobi", unload = TRUE)
devtools::install_github("MERVEX-group/knobi",build_vignettes = TRUE)
document()
document()
document()
print.gam
mgcv::print.gam
document()
detach("package:knobi", unload = TRUE)
devtools::install_github("MERVEX-group/knobi",build_vignettes = TRUE)
document()
detach("package:knobi", unload = TRUE)
devtools::install_github("MERVEX-group/knobi",build_vignettes = TRUE)
document()
document()
document()
document()
detach("package:knobi", unload = TRUE)
devtools::install_github("MERVEX-group/knobi",build_vignettes = TRUE)
document()
detach("package:knobi", unload = TRUE)
devtools::install_github("MERVEX-group/knobi",build_vignettes = TRUE)
document()
detach("package:knobi", unload = TRUE)
devtools::install_github("MERVEX-group/knobi",build_vignettes = TRUE)
devtools::install_github("MERVEX-group/knobi",build_vignettes = TRUE)
devtools::install_github("MERVEX-group/knobi",build_vignettes = TRUE)
library(devtools)
library(roxygen2)
document()
devtools::install_github("MERVEX-group/knobi",build_vignettes = TRUE)
detach("package:knobi", unload = TRUE)
devtools::install_github("MERVEX-group/knobi",build_vignettes = TRUE)
library(devtools)
devtools::install_github("MERVEX-group/knobi",build_vignettes = TRUE)
document()
roxygen2::document()
devtools::document()
library(devtools)
library(roxygen2)
document()
detach("package:knobi", unload = TRUE)
devtools::install_github("MERVEX-group/knobi",build_vignettes = TRUE)
document()
devtools::install_github("MERVEX-group/knobi",build_vignettes = TRUE)
devtools::install_github("MERVEX-group/knobi",build_vignettes = TRUE)
devtools::install_github("MERVEX-group/knobi",build_vignettes = TRUE)
env_results
library(devtools)
library(roxygen2)
document()
install_github("MERVEX-group/knobi",build_vignettes = TRUE)
document()
install_github("MERVEX-group/knobi",build_vignettes = TRUE)
library(devtools)
library(roxygen2)
document()
library(devtools)
library(roxygen2)
document()
install.packages(c("corrplot", "ggplot2",  "gridExtra", "grDevices",  "optimr", "plot3D"))
install.packages(c("corrplot", "ggplot2",  "gridExtra", "grDevices",  "optimr", "plot3D"))
install.packages(c("corrplot", "ggplot2", "gridExtra", "grDevices", "optimr", "plot3D"))
library(knobi)
knobi_proj
install_github("MERVEX-group/knobi",build_vignettes = TRUE)
devtools::install_github("MERVEX-group/knobi",build_vignettes = TRUE)
detach("package:knobi", unload = TRUE)
devtools::install_github("MERVEX-group/knobi",build_vignettes = TRUE)
library(tidyverse)
library(fs)
library(readxl)
library(icesSAG)
# devtools::install_github("MERVEX-group/knobi",build_vignettes = TRUE)
library(knobi)
setwd("Z:/FishClim/datos_ambientais/modelo")
names=list.files()
modelo_data=list()
env_s=list()
env_d=list()
for (i in names) {
path=i
modelo_data[[path]] <- path %>%
excel_sheets() %>%
set_names() %>%
map(read_excel,
path = path)
csv_name=names(modelo_data[[path]])
if("IBI" %in% substr(path,1,3)){
for (j in csv_name){
env_s[[j]]=data.frame(modelo_data[[path]][[j]])}
} else {for (j in csv_name){
env_d[[j]]=data.frame(modelo_data[[path]][[j]])}
}
}
sorted_names=sort(names(env_s))
env_div=list()
env_sub=list()
for(i in sorted_names){
env_div[[i]]=env_d[[i]]
env_sub[[i]]=env_s[[i]]
}
list_3a46_8abd=list()
for(i in 1:length(sorted_names)){
i_name=sorted_names[i]
i_env=env_sub[[i]][,c("year","month","ICES.27.8.a","ICES.27.8.b","ICES.27.8.d")]
i_env_2=env_div[[i]][,c("year","month","ICES.4","ICES.6","ICES.7","ICES.8")]
index=which(i_env$year %in% i_env_2$year)
i_env_2=cbind(i_env[index,-c(1,2)],i_env_2[index,-c(1,2)])
i_env=data.frame(year=i_env$year,month=i_env$month)
i_env[i_name]=rep(0,length(i_env$year))
for(j in 1:nrow(i_env_2)){
i_env[j,i_name]=mean(as.numeric(i_env_2[j,]),na.rm=T)
}
list_3a46_8abd[[i_name]]=data.frame(year=i_env$year[!duplicated(i_env$year)])
list_3a46_8abd[[i_name]][i_name]=tapply(as.matrix(i_env[i_name]),i_env$year,mean)
}
env_3a46_8abd=data.frame(year=list_3a46_8abd[[1]]$year)
for(i in sorted_names){
env_3a46_8abd[i]=list_3a46_8abd[[i]][i]
}
control=list()
control$pella=T
nlag=3
hke_3a46_8abd <- getSAG(stock="hke.27.3a46-8abd",year = 2022)
hke_3a46_8abd=hke_3a46_8abd[-nrow(hke_3a46_8abd),]
hke_3a46_8abd[is.na(hke_3a46_8abd)]=0
index = which(hke_3a46_8abd$Year %in% (env_3a46_8abd$year[1]+nlag):env_3a46_8abd$year[length(env_3a46_8abd$year)])
data=list()
data$Stock="hke.27.3a46-8abd"
data$Spawning_Biomass=hke_3a46_8abd$SSB[index]
data$Catch=hke_3a46_8abd$landings[index]+hke_3a46_8abd$discards[index]
data$Recruitment=hke_3a46_8abd$recruitment[index]
if(sum(data$Recruitment)==0){data$Recruitment=NULL}
data$F_input=hke_3a46_8abd$F[index]
data$classF_input="average"
data$years=hke_3a46_8abd$Year[index]
rp <- getSAG(stock="hke.27.3a46-8abd",data="refpts",year = 2022)
data$RP=list(F_MSY=rp$FMSY)
hke_3a46_8abd_results <- knobi_fit(data,control,plot_out=T,
plot_dir="Z:/FishClim/testing",plot_filename="congress")
hke_3a46_8abd_results
environmental=list()
environmental$nlag=rep(nlag,ncol(env_3a46_8abd)-1)
environmental$data=env_3a46_8abd[,-1]
environmental$years=env_3a46_8abd[,1]
environmental$selected_var="T_bottom300"
hke_3a46_8abd_env <- knobi_env(hke_3a46_8abd_results,environmental,plot_out=T,
plot_filename="env",plot_dir="Z:/FishClim/testing/congress")
hke_3a46_8abd_env
hke_3a46_8abd_env$plots3D=NULL
lag=as.numeric(hke_3a46_8abd_env$selected_lag[hke_3a46_8abd_env$selected_var])
env_var=env_3a46_8abd[[hke_3a46_8abd_env$selected_var]]
new_env=c(env_var[length(env_var)-lag+1])
for(i in 2:lag){
new_env=c(new_env,env_var[length(env_var)-lag+i])}
env_01=env_005=new_env
n=length(new_env)
for(i in n:5){
env_01=c(env_01,env_01[length(env_01)]+0.1)
env_005=c(env_005,env_005[length(env_005)]+0.05)
}
catch=rep(hke_3a46_8abd_results$data$Catch[length(hke_3a46_8abd_results$data$Catch)],5)
Ct=data.frame(catch=catch,
catch08=0.8*catch,
catch12=1.2*catch)
env=data.frame(env_01=env_01,env_005=env_005)
library(roxygen2)
library(devtools)
document()
library(devtools)
library(roxygen2)
document()
library(devtools)
library(roxygen2)
document()
