my_model <- function(x,env1,env2, r, K,c1,c2) {
exp(1)^{c1*env1+c2*env2}*((r*x*(1-(x/K))))
}
params <- c(r=start_r ,K=start_K,c1=start_c,c2=start_c)
fun <- function(p,x,y,env1,env2) {
sum(
(y-my_model(x,env1,env2, p["r"], p["K"],p["c1"],p["c2"]))^2)
}
out <- optimr::optimr(params,fun,x=data$x,y=data$y,method="L-BFGS-B",
upper=c(2,Inf,rep(20,ncol(env))),lower=c(0.05,0,rep(-20,ncol(env))),
env1=env1,env2=env2)
return(out$par)
}
fitting.Schaefer_Mult_3=function(Data){
data=Data$data
start_r=Data$start_r
start_K=Data$start_K
start_c=Data$start_c
env=Data$env
env1=env[,1]; env2=env[,2]; env3=env[,3]
my_model <- function(x,env1,env2, env3, r, K,c1,c2,c3) {
exp(1)^{c1*env1+c2*env2+c3*env3}*((r*x*(1-(x/K))))
}
params <- c(r=start_r ,K=start_K,c1=start_c,c2=start_c,c3=start_c)
fun <- function(p,x,y,env1,env2,env3) {
sum(
(y-my_model(x,env1,env2,env3, p["r"], p["K"],p["c1"],p["c2"],p["c3"]))^2)
}
out <- optimr::optimr(params,fun,x=data$x,y=data$y,method="L-BFGS-B",
upper=c(2,Inf,rep(20,ncol(env))),lower=c(0.05,0,rep(-20,ncol(env))),
env1=env1,env2=env2,env3=env3)
return(out$par)
}
fitting.Schaefer_Mult_4=function(Data){
data=Data$data
start_r=Data$start_r
start_K=Data$start_K
start_c=Data$start_c
env=Data$env
env1=env[,1]; env2=env[,2]; env3=env[,3]; env4=env[,4]
my_model <- function(x,env1,env2, env3, env4,r, K,c1,c2,c3,c4) {
exp(1)^{c1*env1+c2*env2+c3*env3+c4*env4}*((r*x*(1-(x/K))))
}
params <- c(r=start_r ,K=start_K,c1=start_c,c2=start_c,c3=start_c,c4=start_c)
fun <- function(p,x,y,env1,env2,env3,env4) {
sum(
(y-my_model(x,env1,env2,env3,env4, p["r"], p["K"],p["c1"],p["c2"],p["c3"],p["c4"]))^2)
}
out <- optimr::optimr(params,fun,x=data$x,y=data$y,method="L-BFGS-B",
upper=c(2,Inf,rep(20,ncol(env))),lower=c(0.05,0,rep(-20,ncol(env))),
env1=env1,env2=env2,env3=env3,env4=env4)
return(out$par)
}
fitting.Schaefer_Mult_5=function(Data){
data=Data$data
start_r=Data$start_r
start_K=Data$start_K
start_c=Data$start_c
env=Data$env
env1=env[,1]; env2=env[,2]; env3=env[,3]; env4=env[,4]; env5=env[,5]
my_model <- function(x,env1,env2, env3, env4, env5, r, K,c1,c2,c3,c4,c5) {
exp(1)^{c1*env1+c2*env2+c3*env3+c4*env4+c5*env5}*((r*x*(1-(x/K))))
}
params <- c(r=start_r ,K=start_K,c1=start_c,c2=start_c,c3=start_c,c4=start_c,c5=start_c)
fun <- function(p,x,y,env1,env2,env3,env4,env5) {
sum(
(y-my_model(x,env1,env2,env3,env4,env5, p["r"], p["K"],p["c1"],p["c2"],p["c3"],p["c4"],p["c5"]))^2)
}
out <- optimr::optimr(params,fun,x=data$x,y=data$y,method="L-BFGS-B",
upper=c(2,Inf,rep(20,ncol(env))),lower=c(0.05,0,rep(-20,ncol(env))),
env1=env1,env2=env2,env3=env3,env4=env4,env5=env5)
return(out$par)
}
fitting.Pella_Add_2=function(Data){
data=Data$data
start_r=Data$start_r
start_K=Data$start_K
start_c=Data$start_c
start_p=Data$start_p
env=Data$env
env1=env[,1]; env2=env[,2]
my_model <- function(x,env1,env2, r, K,c1,c2,p) {
((r/p)*x*(1-(x/K)^(p))+(c1*env1+c2*env2)*x)
}
params <- c(r=start_r ,K=start_K,c1=start_c,c2=start_c,p=start_p)
fun <- function(p,x,y,env1,env2) {
sum(
(y-my_model(x,env1,env2, p["r"], p["K"],p["c1"],p["c2"],p["p"]))^2)
}
out <- optimr::optimr(params,fun,x=data$x,y=data$y,method="L-BFGS-B",
upper=c(2,Inf,rep(1000000,ncol(env)),3.5),lower=c(0.05,0,rep(-1000000,ncol(env)),0.25),
env1=env1,env2=env2)
return(out$par)
}
fitting.Pella_Add_3=function(Data){
data=Data$data
start_r=Data$start_r
start_K=Data$start_K
start_c=Data$start_c
start_p=Data$start_p
env=Data$env
env1=env[,1]; env2=env[,2]; env3=env[,3]
my_model <- function(x,env1,env2, env3, r, K,c1,c2,c3,p) {
((r/p)*x*(1-(x/K)^(p))+(c1*env1+c2*env2+c3*env3)*x)
}
params <- c(r=start_r ,K=start_K,c1=start_c,c2=start_c,c3=start_c,p=start_p)
fun <- function(p,x,y,env1,env2,env3) {
sum(
(y-my_model(x,env1,env2,env3, p["r"], p["K"],p["c1"],p["c2"],p["c3"],p["p"]))^2)
}
out <- optimr::optimr(params,fun,x=data$x,y=data$y,method="L-BFGS-B",
upper=c(2,Inf,rep(1000000,ncol(env)),3.5),lower=c(0.05,0,rep(-1000000,ncol(env)),0.25),
env1=env1,env2=env2,env3=env3)
return(out$par)
}
fitting.Pella_Add_4=function(Data){
data=Data$data
start_r=Data$start_r
start_K=Data$start_K
start_c=Data$start_c
start_p=Data$start_p
env=Data$env
env1=env[,1]; env2=env[,2]; env3=env[,3]; env4=env[,4]
my_model <- function(x,env1,env2, env3, env4,r, K,c1,c2,c3,c4,p) {
((r/p)*x*(1-(x/K)^(p))+(c1*env1+c2*env2+c3*env3+c4*env4)*x)
}
params <- c(r=start_r ,K=start_K,c1=start_c,c2=start_c,c3=start_c,c4=start_c,p=start_p)
fun <- function(p,x,y,env1,env2,env3,env4) {
sum(
(y-my_model(x,env1,env2,env3,env4, p["r"], p["K"],p["c1"],p["c2"],p["c3"],p["c4"],p["p"]))^2)
}
out <- optimr::optimr(params,fun,x=data$x,y=data$y,method="L-BFGS-B",
upper=c(2,Inf,rep(1000000,ncol(env)),3.5),lower=c(0.05,0,rep(-1000000,ncol(env)),0.25),
env1=env1,env2=env2,env3=env3,env4=env4)
return(out$par)
}
fitting.Pella_Add_5=function(Data){
data=Data$data
start_r=Data$start_r
start_K=Data$start_K
start_c=Data$start_c
start_p=Data$start_p
env=Data$env
env1=env[,1]; env2=env[,2]; env3=env[,3]; env4=env[,4]; env5=env[,5]
my_model <- function(x,env1,env2, env3, env4, env5, r, K,c1,c2,c3,c4,c5,p) {
((r/p)*x*(1-(x/K)^(p))+(c1*env1+c2*env2+c3*env3+c4*env4+c5*env5)*x)
}
params <- c(r=start_r ,K=start_K,c1=start_c,c2=start_c,c3=start_c,c4=start_c,c5=start_c,p=start_p)
fun <- function(p,x,y,env1,env2,env3,env4,env5) {
sum(
(y-my_model(x,env1,env2,env3,env4,env5, p["r"], p["K"],p["c1"],p["c2"],p["c3"],p["c4"],p["c5"],p["p"]))^2)
}
out <- optimr::optimr(params,fun,x=data$x,y=data$y,method="L-BFGS-B",
upper=c(2,Inf,rep(1000000,ncol(env)),3.5),lower=c(0.05,0,rep(-1000000,ncol(env)),0.25),
env1=env1,env2=env2,env3=env3,env4=env4,env5=env5)
return(out$par)
}
fitting.Schaefer_Add_2=function(Data){
data=Data$data
start_r=Data$start_r
start_K=Data$start_K
start_c=Data$start_c
env=Data$env
env1=env[,1]; env2=env[,2]
my_model <- function(x,env1,env2, r, K,c1,c2) {
((r*x*(1-(x/K)))+(c1*env1+c2*env2))*x
}
params <- c(r=start_r ,K=start_K,c1=start_c,c2=start_c)
fun <- function(p,x,y,env1,env2) {
sum(
(y-my_model(x,env1,env2, p["r"], p["K"],p["c1"],p["c2"]))^2)
}
out <- optimr::optimr(params,fun,x=data$x,y=data$y,method="L-BFGS-B",
upper=c(2,Inf,rep(1000000,ncol(env))),lower=c(0.05,0,rep(-1000000,ncol(env))),
env1=env1,env2=env2)
return(out$par)
}
fitting.Schaefer_Add_3=function(Data){
data=Data$data
start_r=Data$start_r
start_K=Data$start_K
start_c=Data$start_c
env=Data$env
env1=env[,1]; env2=env[,2]; env3=env[,3]
my_model <- function(x,env1,env2, env3, r, K,c1,c2,c3) {
((r*x*(1-(x/K)))+(c1*env1+c2*env2+c3*env3)*x)
}
params <- c(r=start_r ,K=start_K,c1=start_c,c2=start_c,c3=start_c)
fun <- function(p,x,y,env1,env2,env3) {
sum(
(y-my_model(x,env1,env2,env3, p["r"], p["K"],p["c1"],p["c2"],p["c3"]))^2)
}
out <- optimr::optimr(params,fun,x=data$x,y=data$y,method="L-BFGS-B",
upper=c(2,Inf,rep(1000000,ncol(env))),lower=c(0.05,0,rep(-1000000,ncol(env))),
env1=env1,env2=env2,env3=env3)
return(out$par)
}
fitting.Schaefer_Add_4=function(Data){
data=Data$data
start_r=Data$start_r
start_K=Data$start_K
start_c=Data$start_c
env=Data$env
env1=env[,1]; env2=env[,2]; env3=env[,3]; env4=env[,4]
my_model <- function(x,env1,env2, env3, env4,r, K,c1,c2,c3,c4) {
((r*x*(1-(x/K)))+(c1*env1+c2*env2+c3*env3+c4*env4)*x)
}
params <- c(r=start_r ,K=start_K,c1=start_c,c2=start_c,c3=start_c,c4=start_c)
fun <- function(p,x,y,env1,env2,env3,env4) {
sum(
(y-my_model(x,env1,env2,env3,env4, p["r"], p["K"],p["c1"],p["c2"],p["c3"],p["c4"]))^2)
}
out <- optimr::optimr(params,fun,x=data$x,y=data$y,method="L-BFGS-B",
upper=c(2,Inf,rep(1000000,ncol(env))),lower=c(0.05,0,rep(-1000000,ncol(env))),
env1=env1,env2=env2,env3=env3,env4=env4)
return(out$par)
}
fitting.Schaefer_Add_5=function(Data){
data=Data$data
start_r=Data$start_r
start_K=Data$start_K
start_c=Data$start_c
env=Data$env
env1=env[,1]; env2=env[,2]; env3=env[,3]; env4=env[,4]; env5=env[,5]
my_model <- function(x,env1,env2, env3, env4, env5, r, K,c1,c2,c3,c4,c5) {
((r*x*(1-(x/K)))+(c1*env1+c2*env2+c3*env3+c4*env4+c5*env5)*x)
}
params <- c(r=start_r ,K=start_K,c1=start_c,c2=start_c,c3=start_c,c4=start_c,c5=start_c)
fun <- function(p,x,y,env1,env2,env3,env4,env5) {
sum(
(y-my_model(x,env1,env2,env3,env4,env5, p["r"], p["K"],p["c1"],p["c2"],p["c3"],p["c4"],p["c5"]))^2)
}
out <- optimr::optimr(params,fun,x=data$x,y=data$y,method="L-BFGS-B",
upper=c(2,Inf,rep(1000000,ncol(env))),lower=c(0.05,0,rep(-1000000,ncol(env))),
env1=env1,env2=env2,env3=env3,env4=env4,env5=env5)
return(out$par)
}
hake_n_multi<-knobi_env(hake_n_results,environmental)
env0=as.data.frame(environmental$data)
env_names=names(env0)
y_env=environmental$years
if(is.null(environmental$start_c)){start_c=c(1,1)} else {
start_c=environmental$start_c}
if(plot_out==T){
old_dir=getwd()
if (is.null(plot_dir)) {plot_dir=knobi_results$control$plot_settings$plot_dir}
setwd(plot_dir)
if (is.null(plot_filename)){plot_filename=knobi_results$control$plot_settings$plot_filename}
if (plot_filename %in% list.dirs(full.names=F)){
setwd(paste0(plot_dir,"/",plot_filename))} else {
dir.create(plot_filename)
setwd(paste0(plot_dir,"/",plot_filename))}
}
df=data.frame(KBPM_residuals=knobi_results$fit$error$residuals,
x = knobi_results$data$Average_Biomass,
y = knobi_results$data$SP, Year=knobi_results$data$years)
f_year=knobi_results$data$years[1]
l_year=knobi_results$data$years[length(knobi_results$data$years)]
env=list()
res_env=list()
df_env=df
if (is.null(environmental$lag)){
nlag=environmental$nlag
data_env=list()
for(j in env_names){
data_env[[j]]=df
if(!is.na(knobi_results$data$Recruitment[1])){
data_env[[j]]=data.frame(data_env[[j]],knobi_results$data$Recruitment)}
ind=which(y_env==f_year)
ind1=which(y_env==l_year)
if(length(ind)>0){data_env[[j]]$env0=env0[ind:ind1,j]} else {
warning('The length of the environmental variable is not enough to use the number of input lags')}
nlag_ind=which(env_names==j)
nlag_j=nlag[nlag_ind]
for (i in 1:nlag_j){
ind=which(y_env==(f_year-i))
ind1=which(y_env==(l_year-i))
if(!is.na(knobi_results$data$Recruitment[1])){
if(length(ind)>0){data_env[[j]][,6+i]=env0[[j]][ind:ind1]} else {
warning('The length of the environmental variable is not enough to use the number of input lags')}
} else {
if(length(ind)>0){data_env[[j]][,5+i]=env0[[j]][ind:ind1]} else {
warning('The length of the environmental variable is not enough to use the number of input lags')}
}
}
vec_env=1:nlag_j
for (i in 1:nlag_j){
vec_env[i]=paste0(j,"_lag",i)
}
if(knobi_results$control$method=="Biomass"){
if(!is.na(knobi_results$data$Recruitment[1])){
colnames(data_env[[j]])=c("KBPM_residuals","SP","B","years","R",paste0(j,"_lag0"),vec_env)
} else {colnames(data_env[[j]])=c("KBPM_residuals","SP","B","years",paste0(j,"_lag0"),vec_env)}
} else {
if(!is.na(knobi_results$data$Recruitment[1])){
colnames(data_env[[j]])=c("KBPM_residuals","SP","SSB","years","R",paste0(j,"_lag0"),vec_env)
} else {colnames(data_env[[j]])=c("KBPM_residuals","SP","SSB","years",paste0(j,"_lag0"),vec_env)}
}
env[[j]]<-data_env[[j]][,c("KBPM_residuals",paste0(j,"_lag0"),vec_env)]
p.mat <- cor.mtest(env[[j]])
corrplot::corrplot(round(cor(as.matrix(env[[j]]),use="na.or.complete"),2),title=j,mar=c(0,0,2,0),method="number",type="lower",diag=T,p.mat = p.mat, sig.level = 0.05)
if(plot_out==T){
plotname=paste0("corplot_",j,".jpeg")
grDevices::jpeg(plotname,width=2500, height=2500,res=300)
corrplot::corrplot(round(cor(as.matrix(env[[j]]),use="na.or.complete"),2),title=j,mar=c(0,0,2,0),method="number",type="lower",diag=T,p.mat = p.mat, sig.level = 0.05)
grDevices::dev.off()
}
cor=round(cor(as.matrix(env[[j]]),use="na.or.complete"),4)
cor=cor[,1]; cor=cor[-1]
res_env$selected_lag[[j]]=which(max(abs(cor))==abs(cor))[1]-1
res_env$lag_cor[[j]]=cor[[which(max(abs(cor))==abs(cor))[1]]]
df_env[,j]=scale(env[[j]][,res_env$selected_lag[[j]]+2])
}
} else {
res_env=list()
df_env=df
for(j in env_names){
lag_ind=which(env_names==j)
lag_j=environmental$lag[lag_ind]
ind=which(y_env==(f_year-lag_j))
ind1=which(y_env==(l_year-lag_j))
if(length(ind)>0){df_env[,j]=scale(env0[[j]][ind:ind1])} else{
warning('The length of the environmental variable is not enough to use the number of input lags')}
res_env$fixed_lag[[j]]=lag_j
cor=round(cor(as.matrix(df_env[,c("KBPM_residuals",j)]),use="na.or.complete"),4)
cor=cor[1,2]
res_env$lag_cor[[j]]=cor}
}
if(is.null(environmental$multicovar)){
multicovar=F
} else {
multicovar=environmental$multicovar
}
multicovar
envs=df_env[,-c(1:3)]
cor=round(cor(as.matrix(envs),use="na.or.complete"),4)
for(i in 1:ncol(cor)){
cor[i,i]=0
}
cor=max(abs(cor))
if(cor>=0.35){
p.mat <- cor.mtest(envs)
corrplot::corrplot(round(cor(as.matrix(envs),use="na.or.complete"),2),
title="Covariables correlation",mar=c(0,0,2,0),method="number",
type="lower",diag=T,p.mat = p.mat, sig.level = 0.05)
print(round(cor(as.matrix(envs),use="na.or.complete"),4))
cat("\n")
warning("The covariables are highly correlated (see corrplot). To avoid estimation issues, consider removing variables or setting multicovar=FALSE.")
}
if(ncol(envs)==1){stop("The number of covariables is too short. Almost two environmental variables are required.")}
if(ncol(envs)>=6){stop("The number of covariables is too big. Consider reducing the amount of environmental variables.")}
df_env
Data=list(env=envs,data=df, start_r=as.numeric(knobi_results$fit$Parameter_estimates[[1]]),
start_K=as.numeric(knobi_results$fit$Parameter_estimates[[2]]),
start_c=start_c[1], start_p=1)
class(Data)=paste0("Pella_Mult_",ncol(envs))
model_Pella_Mult <-fitting(Data)
class(Data)=paste0("Pella_Add_",ncol(envs))
paste0("Pella_Mult_",ncol(envs))
data=Data$data
start_r=Data$start_r
start_K=Data$start_K
start_p=Data$start_p
start_c=Data$start_c
env=Data$env
env1=env[,1]; env2=env[,2]; env3=env[,3]
Data$env
env1=env[,1]; env2=env[,2]; env3=env[,3]
envs
df_env[,-c(1:3)]
df_env
envs=df_env[,-c(1:4)]
cor=round(cor(as.matrix(envs),use="na.or.complete"),4)
for(i in 1:ncol(cor)){
cor[i,i]=0
}
cor=max(abs(cor))
if(cor>=0.35){
p.mat <- cor.mtest(envs)
corrplot::corrplot(round(cor(as.matrix(envs),use="na.or.complete"),2),
title="Covariables correlation",mar=c(0,0,2,0),method="number",
type="lower",diag=T,p.mat = p.mat, sig.level = 0.05)
print(round(cor(as.matrix(envs),use="na.or.complete"),4))
cat("\n")
warning("The covariables are highly correlated (see corrplot). To avoid estimation issues, consider removing variables or setting multicovar=FALSE.")
}
if(ncol(envs)==1){stop("The number of covariables is too short. Almost two environmental variables are required.")}
if(ncol(envs)>=6){stop("The number of covariables is too big. Consider reducing the amount of environmental variables.")}
Data=list(env=envs,data=df, start_r=as.numeric(knobi_results$fit$Parameter_estimates[[1]]),
start_K=as.numeric(knobi_results$fit$Parameter_estimates[[2]]),
start_c=start_c[1], start_p=1)
if (knobi_results$control$pella){
class(Data)=paste0("Pella_Mult_",ncol(envs))
model_Pella_Mult <-fitting(Data)
class(Data)=paste0("Pella_Add_",ncol(envs))
model_Pella_Add <-fitting(Data)
res_env$model_env_Multiplicative = model_Pella_Mult
res_env$model_env_Additive = model_Pella_Add
class(model_Pella_Mult) = "Pella_Mult_m"
ref_pts_mult = RF(model_Pella_Mult)
class(model_Pella_Add) = "Pella_Add_m"
ref_pts_add = RF(model_Pella_Add)
res_env$ref_pts = list(ref_pts_mult=ref_pts_mult,ref_pts_add=ref_pts_add)
model_Pella_Mult=list(model_Pella_Mult)
model_Pella_Mult$data$SP=df$y
if(knobi_results$control$method=="Biomass"){model_Pella_Mult$data$B=df$x} else {
model_Pella_Mult$data$SSB=df$x}
model_Pella_Mult$data$env=envs
class(model_Pella_Mult)="Pella_Mult_m"
model_Pella_Add=list(model_Pella_Add)
model_Pella_Add$data$SP=df$y
if(knobi_results$control$method=="Biomass"){model_Pella_Add$data$B=df$x} else {
model_Pella_Add$data$SSB=df$x}
model_Pella_Add$data$env=envs
class(model_Pella_Add)="Pella_Add_m"
class(knobi_results$fit)="Pella_Year"
bv <- predict_model(knobi_results$fit)
bv1 <- predict_model(model_Pella_Mult)
bv2 <- predict_model(model_Pella_Add)
} else {
class(Data)=paste0("Schaefer_Mult_",ncol(envs))
model_Schaefer_Mult <-fitting(Data)
class(Data)=paste0("Schaefer_Add_",ncol(envs))
model_Schaefer_Add <-fitting(Data)
res_env$model_env_Multiplicative = model_Schaefer_Mult
res_env$model_env_Additive = model_Schaefer_Add
class(model_Schaefer_Mult) = "Schaefer_Mult_m"
ref_pts_mult = RF(model_Schaefer_Mult)
class(model_Schaefer_Add) = "Schaefer_Add_m"
ref_pts_add = RF(model_Schaefer_Add)
res_env$ref_pts = list(ref_pts_mult=ref_pts_mult,ref_pts_add=ref_pts_add)
model_Schaefer_Mult=list(model_Schaefer_Mult)
model_Schaefer_Mult$data$SP=df$y
if(knobi_results$control$method=="Biomass"){ model_Schaefer_Mult$data$B=df$x} else {
model_Schaefer_Mult$data$SSB=df$x}
model_Schaefer_Mult$data$env=envs
class(model_Schaefer_Mult)="Schaefer_Mult_m"
model_Schaefer_Add=list(model_Schaefer_Add)
model_Schaefer_Add$data$SP=df$y
if(knobi_results$control$method=="Biomass"){model_Schaefer_Add$data$B=df$x} else {
model_Schaefer_Add$data$SSB=df$x}
model_Schaefer_Add$data$env=envs
class(model_Schaefer_Add)="Schaefer_Add_m"
class(knobi_results$fit)="Schaefer_Year"
bv <- predict_model(knobi_results$fit)
bv1 <- predict_model(model_Schaefer_Mult)
bv2 <- predict_model(model_Schaefer_Add)
}
document()
document()
document()
library(devtools)
library(roxygen2)
document()
library(devtools)
library(roxygen2)
document()
document()ç
document()ç
document()
library(devtools)
library(roxygen2)
document()
library(devtools)
library(roxygen2)
document()
library(devtools)
library(roxygen2)
document()
library(devtools)
library(roxygen2)
document()
library(devtools)
library(roxygen2)
document()
library(roxygen2)
library(devtools)
document()
document()
document()
document()
document()
library(devtools)
library(roxygen2)
document()
document()
document()
document()
document()
document()
document()
document()
document()
library(devtools)
library(roxygen2)
document()
setwd("D:/Usuarios/apaz/Desktop")
document()
setwd("D:/Usuarios/apaz/Desktop/knobi")
document()
document()
document()
document()
library(devtools)
library(roxygen2)
document()
document()
document()
max(5,6,7)
?max
library(devtools)
library(roxygen2)
